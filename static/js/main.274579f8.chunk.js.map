{"version":3,"sources":["images/girl.png","store/index.js","reducers/index.js","actions/index.js","App.js","registerServiceWorker.js","index.js"],"names":["store","createStore","state","action","console","log","type","totalAmount","payload","username","setWithdrawalAmount","amount","App","withdrawMoney","e","target","getAttribute","dispatch","Number","getState","className","src","photographer","alt","formatNumber","prefix","data-amount","onClick","this","Component","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","process","origin","addEventListener","swUrl","fetch","then","response","status","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","error","render","ReactDOM","document","getElementById","registerServiceWorker","subscribe"],"mappings":"6OAAe,MAA0B,iC,sBCU1BA,EAFDC,aCRC,SAACC,EAAOC,GAErB,OADAC,QAAQC,IAAIH,EAAOC,GACXA,EAAOG,MACb,IAAI,iBACF,OAAO,2BACFJ,GADL,IAEEK,YAAaL,EAAMK,YAAcJ,EAAOK,UAE5C,QACE,OAAON,KDNQ,CACnBO,SAAU,kBACVF,YAAa,UELFG,EAAsB,SAACC,GAClC,MAAO,CACLL,KAAK,iBACLE,QAASG,I,OCkCEC,E,4MA7BbC,cAAgB,SAACC,GACf,IAAMH,EAASG,EAAEC,OAAOC,aAAa,eACrChB,EAAMiB,SAASP,EAAoBQ,OAAOP,M,4CAG5C,WAAU,IAAD,EAC2BX,EAAMmB,WAAhCZ,EADD,EACCA,YAAaE,EADd,EACcA,SACrB,OACE,sBAAKW,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAeC,IAAKC,EAAcC,IAAI,SACrD,oBAAGH,UAAU,gBAAb,oBAAqCX,EAArC,QACA,sBAAKW,UAAU,cAAf,UACGI,IAAa,CAAEC,OAAQ,KAAvBD,CAA8BjB,GAC/B,mBAAGa,UAAU,oBAAb,6BAGF,0BAASA,UAAU,eAAnB,UACE,wBAAQM,cAAY,QAAQC,QAASC,KAAKf,cAA1C,8BAGA,wBAAQa,cAAY,OAAOC,QAASC,KAAKf,cAAzC,uC,GArBQgB,aCGZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIS,SAASC,IACtB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,8BAAwBP,OAAOC,UAC3CO,SAAWR,OAAOC,SAASO,OAIvC,OAGFR,OAAOS,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMH,8BAAN,sBAEPT,IAiDV,SAAiCY,GAE/BC,MAAMD,GACHE,MAAK,SAAAC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CZ,UAAUa,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,aAAaT,MAAK,WAC7BZ,OAAOC,SAASqB,eAKpBC,EAAgBb,MAGnBc,OAAM,WACLpD,QAAQC,IACN,oEArEAoD,CAAwBf,GAIxBL,UAAUa,cAAcC,MAAMP,MAAK,WACjCxC,QAAQC,IACN,gHAMJkD,EAAgBb,OAMxB,SAASa,EAAgBb,GACvBL,UAAUa,cACPd,SAASM,GACTE,MAAK,SAAAQ,GACJA,EAAaM,cAAgB,WAC3B,IAAMC,EAAmBP,EAAaQ,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzD,QACfmC,UAAUa,cAAcY,WAK1B1D,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBmD,OAAM,SAAAO,GACL3D,QAAQ2D,MAAM,4CAA6CA,MCxEjE,IAAMC,EAAS,WACbC,IAASD,OAAO,cAAC,EAAD,IAASE,SAASC,eAAe,SACjDC,KAGFJ,IAEAhE,EAAMqE,UAAUL,K","file":"static/js/main.274579f8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/girl.26cec75c.png\";","import { createStore } from 'redux';\r\nimport reducer from '../reducers/index';\r\n\r\nconst initialState = {\r\n  username: 'Kwabena Agyeman',\r\n  totalAmount: 2500701,\r\n};\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;\r\n","export default (state, action) => {\r\n  console.log(state, action);\r\n  switch (action.type) {\r\n    case `WITHDRAW_MONEY`:\r\n      return {\r\n        ...state,\r\n        totalAmount: state.totalAmount - action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const setWithdrawalAmount = (amount) => {\r\n  return {\r\n    type: `WITHDRAW_MONEY`,\r\n    payload: amount,\r\n  };\r\n};\r\n","import React, { Component } from 'react';\nimport formatNumber from 'format-number';\nimport photographer from './images/girl.png';\nimport './App.css';\nimport store from './store/index';\nimport { setWithdrawalAmount } from './actions';\n\nclass App extends Component {\n  withdrawMoney = (e) => {\n    const amount = e.target.getAttribute('data-amount');\n    store.dispatch(setWithdrawalAmount(Number(amount)));\n  };\n\n  render() {\n    const { totalAmount, username } = store.getState();\n    return (\n      <div className='App'>\n        <img className='App__userpic' src={photographer} alt='user' />\n        <p className='App__username'>Hello, {username}! </p>\n        <div className='App__amount'>\n          {formatNumber({ prefix: '$' })(totalAmount)}\n          <p className='App__amount--info'>Total Amount</p>\n        </div>\n\n        <section className='App__buttons'>\n          <button data-amount='10000' onClick={this.withdrawMoney}>\n            WITHDRAW $10,000\n          </button>\n          <button data-amount='5000' onClick={this.withdrawMoney}>\n            WITHDRAW $5,000\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport store from './store/index';\n\nconst render = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n  registerServiceWorker();\n};\n\nrender();\n\nstore.subscribe(render);\n"],"sourceRoot":""}